# -*- coding: UTF-8 -*-
"""
@Project : pythonProject
@File    : 1. open.py
@IDE     : PyCharm
@Author  : FengHuohuo
@Date    : 2022/5/31 17:20
@Function：
r: 以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。
rb: 以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。
r+: 打开一个文件用于读写。文件指针将会放在文件的开头。
rb+:以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。
w: 打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
wb: 以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
w+: 打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
wb+:以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
a: 打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
ab: 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
a+: 打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。
ab+:以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。

"""
# 要以读文件的模式打开一个文件对象，使用Python内置的open()函数，传入文件名和标示符
f = open('test.txt', 'r')

# 若文件不存在，就会报IOError错误
# 若成功打开，就调用read()方法读取文件中的内容。
f.read()

# 特别需要注意的是： 在操作文件完成之后，需要调用close()方法关闭文件。因为文件对象会占用操作系统的资源，并且操作系统同一时间能打开的文件数量也是有限的：
f.close()

'''
由于文件读写时有可能产生IOError，一旦出错，后面的f.close()就不会调用。所以，为了保证无论是否出错都能正确地关闭文件，
我们可以使用try ... finally通过捕捉异常、处理异常来实现。
如果能保证文件打开没有异常的情况下，我们每次都这么写，实在太繁琐。所以，Python引入了with语句来自动帮我们调用close()方法。
也就是说：文件读取的这个操作，只有在with语句内部才会生效，不会离开。
'''
with open('test.txt', 'r') as f:
    print(f.read())

'''
文件对象属性	          描 述
file.closed	     表示文件已经被关闭，否则为False
file.mode	     打开文件时使用的访问模式
file.encoding	 文件所使用的编码
file.name	     文件名
file.newlines  	 未读取到行分隔符时为None
'''
# open(path, ‘-模式-‘,encoding=’UTF-8’)
# 即open(路径+文件名, 读写模式, 编码)
'''
r ：只读
r+ : 读写
w ： 新建（会对原有文件进行覆盖）
a ： 追加
b ： 二进制文件
'''

'''
如果 csvfile 是文件对象，则打开它时应使用 newline=‘’。
其备注：如果没有指定 newline=‘’，则嵌入引号中的换行符将无法正确解析，并且在写入时，使用 \r\n 换行的平台会有多余的 \r 写入。
由于 csv 模块会执行自己的（通用）换行符处理，因此指定 newline=‘’ 应该总是安全的。

'''